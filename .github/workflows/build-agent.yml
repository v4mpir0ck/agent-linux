name: Build Agent Binario y Publicar Release

on:
  workflow_dispatch:
    inputs:
      dockerfile:
        description: 'Dockerfile a usar (ej: Dockerfile.ubi8, Dockerfile.ubuntu, Dockerfile.centos)'
        required: true
        default: 'Dockerfile.ubi8'

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Build Docker image
        run: docker build -f agente/dockerfiles/${{ github.event.inputs.dockerfile }} -t agent-build agente

      - name: lista archivos en /src
        run: docker run --rm -v ${{ github.workspace }}/agente:/src agent-build bash -c "ls -l /src"

      - name: Build agent in Docker
        run: docker run --rm -v ${{ github.workspace }}/agente:/src agent-build bash -c "cd /src && chmod +x build_agent.sh && ./build_agent.sh"

      - name: Debug estructura y .git
        working-directory: ${{ github.workspace }}
        run: |
          echo "Directorio actual: $(pwd)"
          echo "Contenido del workspace:"
          ls -la
          echo "Buscando .git en el workspace:"
          find . -name .git -type d

      - name: Calcula el siguiente tag automáticamente
        id: autotag
        uses: actions/github-script@v7
        with:
          script: |
            const dockerfile = '${{ github.event.inputs.dockerfile }}';
            const { data: tags } = await github.rest.repos.listTags({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 100
            });
            const filtered = tags.filter(t => t.name.endsWith('-' + dockerfile));
            if (filtered.length === 0) {
              return 'v1.0.0-' + dockerfile;
            }
            filtered.sort((a, b) => a.name.localeCompare(b.name, undefined, { numeric: true }));
            const last = filtered[filtered.length - 1].name;
            const base = last.replace('-' + dockerfile, '').replace('v', '');
            const [major, minor, patch] = base.split('.').map(Number);
            const nextTag = `v${major}.${minor}.${patch + 1}-${dockerfile}`;
            return nextTag;
          result-encoding: string

      - name: Upload binario como artefacto
        uses: actions/upload-artifact@v4
        with:
          name: agent-${{ github.event.inputs.dockerfile }}
          path: agente/dist/agent

      - name: Publicar binario en GitHub Releases
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.autotag.outputs.result }}
          name: "Agent Binario ${{ github.event.inputs.dockerfile }}"
          body: "Release del binario agent para distribución ${{ github.event.inputs.dockerfile }}.\nArchivo: agent-${{ github.event.inputs.dockerfile }}"
          files: agente/dist/agent
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}

      - name: Debug estructura y .git para releases
        working-directory: ${{ github.workspace }}
        run: |
          echo "Directorio actual: $(pwd)"
          echo "Contenido del workspace:"
          ls -la
          echo "Buscando .git en el workspace:"
          find . -name .git -type d

      - name: Actualiza releases.md
        working-directory: ${{ github.workspace }}
        run: |
          python agente/update_releases_md.py "${{ steps.autotag.outputs.result }}" "${{ github.event.inputs.dockerfile }}" "${{ github.event.inputs.dockerfile }}" "https://github.com/v4mpir0ck/agent-linux/releases/tag/${{ steps.autotag.outputs.result }}"
          git config --global user.email "github-actions@github.com"
          git config --global user.name "github-actions"
          git pull --rebase
          git add agente/README-releases.md
          git commit -m "docs: actualiza README-releases.md con release ${{ steps.autotag.outputs.result }}" || echo "No hay cambios para commitear"
          git push